// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package _interface is a generated GoMock package.
package _interface

import (
	context "context"
	reflect "reflect"

	entity "github.com/budsx/expenses-management/entity"
	rabbitmq "github.com/budsx/expenses-management/util/rabbitmq"
	gomock "github.com/golang/mock/gomock"
)

// MockPaymentProcessor is a mock of PaymentProcessor interface.
type MockPaymentProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentProcessorMockRecorder
}

// MockPaymentProcessorMockRecorder is the mock recorder for MockPaymentProcessor.
type MockPaymentProcessorMockRecorder struct {
	mock *MockPaymentProcessor
}

// NewMockPaymentProcessor creates a new mock instance.
func NewMockPaymentProcessor(ctrl *gomock.Controller) *MockPaymentProcessor {
	mock := &MockPaymentProcessor{ctrl: ctrl}
	mock.recorder = &MockPaymentProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentProcessor) EXPECT() *MockPaymentProcessorMockRecorder {
	return m.recorder
}

// ProcessPayment mocks base method.
func (m *MockPaymentProcessor) ProcessPayment(arg0 context.Context, arg1 *entity.PaymentProcessorRequest) (*entity.PaymentProcessorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPayment", arg0, arg1)
	ret0, _ := ret[0].(*entity.PaymentProcessorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessPayment indicates an expected call of ProcessPayment.
func (mr *MockPaymentProcessorMockRecorder) ProcessPayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPayment", reflect.TypeOf((*MockPaymentProcessor)(nil).ProcessPayment), arg0, arg1)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// GetUserWithPassword mocks base method.
func (m *MockUserRepository) GetUserWithPassword(arg0 context.Context, arg1 string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithPassword", arg0, arg1)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithPassword indicates an expected call of GetUserWithPassword.
func (mr *MockUserRepositoryMockRecorder) GetUserWithPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithPassword", reflect.TypeOf((*MockUserRepository)(nil).GetUserWithPassword), arg0, arg1)
}

// MockExpensesRepository is a mock of ExpensesRepository interface.
type MockExpensesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExpensesRepositoryMockRecorder
}

// MockExpensesRepositoryMockRecorder is the mock recorder for MockExpensesRepository.
type MockExpensesRepositoryMockRecorder struct {
	mock *MockExpensesRepository
}

// NewMockExpensesRepository creates a new mock instance.
func NewMockExpensesRepository(ctrl *gomock.Controller) *MockExpensesRepository {
	mock := &MockExpensesRepository{ctrl: ctrl}
	mock.recorder = &MockExpensesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpensesRepository) EXPECT() *MockExpensesRepositoryMockRecorder {
	return m.recorder
}

// ApprovalExpense mocks base method.
func (m *MockExpensesRepository) ApprovalExpense(arg0 context.Context, arg1 *entity.ExpenseApproval) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovalExpense", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApprovalExpense indicates an expected call of ApprovalExpense.
func (mr *MockExpensesRepositoryMockRecorder) ApprovalExpense(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApprovalExpense", reflect.TypeOf((*MockExpensesRepository)(nil).ApprovalExpense), arg0, arg1)
}

// GetExpenseByID mocks base method.
func (m *MockExpensesRepository) GetExpenseByID(arg0 context.Context, arg1 int64) (*entity.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpenseByID", arg0, arg1)
	ret0, _ := ret[0].(*entity.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpenseByID indicates an expected call of GetExpenseByID.
func (mr *MockExpensesRepositoryMockRecorder) GetExpenseByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpenseByID", reflect.TypeOf((*MockExpensesRepository)(nil).GetExpenseByID), arg0, arg1)
}

// GetExpensesWithPagination mocks base method.
func (m *MockExpensesRepository) GetExpensesWithPagination(arg0 context.Context, arg1 *entity.ExpenseListQuery) ([]*entity.Expense, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpensesWithPagination", arg0, arg1)
	ret0, _ := ret[0].([]*entity.Expense)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetExpensesWithPagination indicates an expected call of GetExpensesWithPagination.
func (mr *MockExpensesRepositoryMockRecorder) GetExpensesWithPagination(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpensesWithPagination", reflect.TypeOf((*MockExpensesRepository)(nil).GetExpensesWithPagination), arg0, arg1)
}

// PingContext mocks base method.
func (m *MockExpensesRepository) PingContext(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingContext", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingContext indicates an expected call of PingContext.
func (mr *MockExpensesRepositoryMockRecorder) PingContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingContext", reflect.TypeOf((*MockExpensesRepository)(nil).PingContext), arg0)
}

// UpdateExpenseStatus mocks base method.
func (m *MockExpensesRepository) UpdateExpenseStatus(arg0 context.Context, arg1 int64, arg2 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExpenseStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExpenseStatus indicates an expected call of UpdateExpenseStatus.
func (mr *MockExpensesRepositoryMockRecorder) UpdateExpenseStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExpenseStatus", reflect.TypeOf((*MockExpensesRepository)(nil).UpdateExpenseStatus), arg0, arg1, arg2)
}

// WriteAuditLog mocks base method.
func (m *MockExpensesRepository) WriteAuditLog(arg0 context.Context, arg1 *entity.AuditLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAuditLog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteAuditLog indicates an expected call of WriteAuditLog.
func (mr *MockExpensesRepositoryMockRecorder) WriteAuditLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAuditLog", reflect.TypeOf((*MockExpensesRepository)(nil).WriteAuditLog), arg0, arg1)
}

// WriteExpense mocks base method.
func (m *MockExpensesRepository) WriteExpense(arg0 context.Context, arg1 *entity.Expense) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteExpense", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteExpense indicates an expected call of WriteExpense.
func (mr *MockExpensesRepositoryMockRecorder) WriteExpense(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteExpense", reflect.TypeOf((*MockExpensesRepository)(nil).WriteExpense), arg0, arg1)
}

// MockRabbitMQClient is a mock of RabbitMQClient interface.
type MockRabbitMQClient struct {
	ctrl     *gomock.Controller
	recorder *MockRabbitMQClientMockRecorder
}

// MockRabbitMQClientMockRecorder is the mock recorder for MockRabbitMQClient.
type MockRabbitMQClientMockRecorder struct {
	mock *MockRabbitMQClient
}

// NewMockRabbitMQClient creates a new mock instance.
func NewMockRabbitMQClient(ctrl *gomock.Controller) *MockRabbitMQClient {
	mock := &MockRabbitMQClient{ctrl: ctrl}
	mock.recorder = &MockRabbitMQClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRabbitMQClient) EXPECT() *MockRabbitMQClientMockRecorder {
	return m.recorder
}

// GetClient mocks base method.
func (m *MockRabbitMQClient) GetClient() *rabbitmq.RabbitMQClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(*rabbitmq.RabbitMQClient)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockRabbitMQClientMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockRabbitMQClient)(nil).GetClient))
}

// PublishPayment mocks base method.
func (m *MockRabbitMQClient) PublishPayment(arg0 string, arg1 *entity.PublishPaymentRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishPayment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishPayment indicates an expected call of PublishPayment.
func (mr *MockRabbitMQClientMockRecorder) PublishPayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishPayment", reflect.TypeOf((*MockRabbitMQClient)(nil).PublishPayment), arg0, arg1)
}
